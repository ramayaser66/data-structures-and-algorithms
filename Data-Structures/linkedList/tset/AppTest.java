/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package Data-Structures.linkedList;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void testToString() {

        linkedList test = new linkedList();

        String expected = "linkedList is empty...";


        assertEquals("the linkedList should be empty...", expected, test.toString());

    }

    @Test
    public void testInsert() {
        linkedList test = new linkedList();
        test.insert(5);

        String expected = "{5}->null";

        assertEquals("an error occurred inserting in linkedList...", expected, test.toString());

    }

    @Test
    public void testincludes() {

        linkedList test = new linkedList();
        test.insert(5);

        assertTrue("an error occurred testing the include function...", test.includes(5));


    }

    @Test
    public void testappend() {
        linkedList test = new linkedList();
        linkedList test2 = new linkedList();
        test.insert(5);
        test.append(24);



        test2.insert(5);
        test2.append(24);
        test2.append(10);

         String expected = "{5}->{24}->null";
         String expected2 = "{5}->{24}->{10}->null";

         assertEquals("an error occurred testing the append function...", expected, test.toString());
        assertEquals("an error occurred testing the append function...", expected2, test2.toString());

    }


    @Test public void testInsertBefore(){
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);

    test.insertBefore(8, 9);

    String expected = "{9}->{8}->{5}->null";

    assertEquals("an error occurred testing the insertBefore function...", expected, test.toString());


    }



    @Test public void testInsertAfter() {
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);

        test.insertAfter(5, 10);

        String expected = "{8}->{5}->{10}->null";

        assertEquals("an error occurred testing the insertAfter function...", expected, test.toString());

    }

    @Test public void testKthValue(){
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);
        test.insert(1);

        test.kthValue(0);

        String expected = "5";

        assertEquals("an error occurred .... invalid k value", expected, test.kthValue(0));


    }


    @Test public void testKthValueNegativeK(){
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);
        test.insert(1);

        test.kthValue(0);

        String expected = "an error occurred .... invalid k value";

        assertEquals("an error occurred .... invalid k value", expected, test.kthValue(-1));


    }

    @Test public void testKthValueBiggerK(){
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);
        test.insert(1);

        test.kthValue(4);

        String expected = "an error occurred .... invalid k value";

        assertEquals("an error occurred .... invalid k value", expected, test.kthValue(-1));

    }

    @Test public void testKthValueOfSizeOne(){
        linkedList test = new linkedList();

        test.insert(5);
        test.insert(8);
        test.insert(1);

        test.kthValue(3);

        String expected = "5";

        assertEquals("an error occurred .... invalid k value", expected, test.kthValue(0));

    }



        
    // challenge-8 tests 


    @Test public void testZipListsOfSameSize(){
        linkedList test = new linkedList();
        linkedList testList1 = new linkedList();
        linkedList testList2 = new linkedList();

        testList1.insert(1);
        testList1.insert(3);
        testList1.insert(5);


        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);



        String expected = "{5}->{6}->{3}->{4}->{1}->{2}->null";

        assertEquals("an error occurred in ZipLists of the same size.... ", expected, test.zipLists(testList1,testList2).toString());

    }
    @Test public void testZipListsOfSmallerL1(){
        linkedList test = new linkedList();
        linkedList testList1 = new linkedList();
        linkedList testList2 = new linkedList();

        testList1.insert(1);
        testList1.insert(3);
//        testList1.insert(5);


        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);



        String expected = "{3}->{6}->{1}->{4}->{2}->null";

        assertEquals("an error occurred in ZipLists of the same size.... ", expected, test.zipLists(testList1,testList2).toString());

    }


    @Test public void testZipListsOfSmallerL2(){
        linkedList test = new linkedList();
        linkedList testList1 = new linkedList();
        linkedList testList2 = new linkedList();

        testList1.insert(1);
        testList1.insert(3);
        testList1.insert(5);


        testList2.insert(2);
        testList2.insert(4);
//        testList2.insert(6);



        String expected = "{5}->{4}->{3}->{2}->{1}->null";

        assertEquals("an error occurred in ZipLists of the same size.... ", expected, test.zipLists(testList1,testList2).toString());

    }


}
