/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stacksandqueues;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {


    @Test public void testStackPush(){

        Stack stack1 = new Stack();
        stack1.push(2);

        String expected = "Stack{top=2}";
        assertEquals("an error with the stack push test ..", expected,stack1.toString());

    }

    @Test public void testStackMultiPush(){
        Stack stack1 = new Stack();
        stack1.push(2);
        stack1.push(3);
        stack1.push(4);
        stack1.push(5);

        String expected = "Stack{top=6}";
        assertEquals("an error with the stack push test ..", expected,stack1.toString());
    }

    @Test public void testStackPop(){
        Stack stack1 = new Stack();
        stack1.push(2);
        stack1.push(3);
        stack1.push(4);

        stack1.pop();


        String expected = "Stack{top=3}";
        assertEquals("an error with the stack pop test ..", expected,stack1.toString());
    }

    @Test public void testStackIsEmptyAfterPop(){
        Stack stack1 = new Stack();
        stack1.push(2);
        stack1.push(3);
        stack1.push(4);

        stack1.pop();
        stack1.pop();
        stack1.pop();


        boolean expected = true;
        assertEquals("an error with the stack pop test ..", expected,stack1.isEmpty());
    }

    @Test public void testStackPeek(){
        Stack stack1 = new Stack();
        stack1.push(2);
        stack1.push(3);
        stack1.push(4);



        int expected = 4;
        assertEquals("an error with the stack peek test ..", expected,stack1.peek());
    }

    @Test public void testEmptyStack(){
        Stack stack1 = new Stack();
        stack1.isEmpty();



        boolean expected = true;
        assertEquals("an error with the empty stack test..", expected,stack1.isEmpty());
    }

//    @Test public void testEmptyStackException(){
//        Stack stack1 = new Stack();
//
////        throw new NullPointerException("error...called on an empty stack");
////        String expected = new NullPointerException("error...called on an empty stack");
//        assertEquals("an error with the empty stack test..",new NullPointerException("error...called on an empty stack"),stack1.pop());
//    }


    @Test public void testQueueEnqueue(){
        Queue queue1 = new Queue();
        queue1.enqueue(1);

        System.out.println(queue1.toString());

        String expected = "Queue{front=1, rear=1}";
        assertEquals("an error with the queue enqueue test ..", expected,queue1.toString());
    }



    @Test public void testQueueMultiEnqueue(){
        Queue queue1 = new Queue();
        queue1.enqueue(1);
        queue1.enqueue(2);
        queue1.enqueue(3);
        System.out.println(queue1.toString());

        String expected = "Queue{front=1, rear=3}";
        assertEquals("an error with the queue multiple enqueues test ..", expected,queue1.toString());
    }

    @Test public void testQueueDequeue(){
        Queue queue1 = new Queue();
        queue1.enqueue(4);
        queue1.enqueue(5);
        queue1.enqueue(6);

        queue1.dequeue();

        int expected = 5;
        assertEquals("an error with the queue dequeue test ..", expected,queue1.dequeue());
    }

    @Test public void testQueuePeek(){
        Queue queue1 = new Queue();
        queue1.enqueue(4);
        queue1.enqueue(5);
        queue1.enqueue(6);

        System.out.println(queue1.peek());

        int expected = 4;
        assertEquals("an error with the queue peek test ..", expected,queue1.peek());
    }



    @Test public void testQueueIsEmpteyAfterDequeue(){
        Queue queue1 = new Queue();
        queue1.enqueue(4);
        queue1.enqueue(5);
        queue1.enqueue(6);

        queue1.dequeue();
        queue1.dequeue();
        queue1.dequeue();


        boolean expected = true;
        assertEquals("an error with the queue dequeue test ..", expected,queue1.isEmpty());
    }

    @Test public void testEmptyQueue(){
        Queue queue1 = new Queue();
        queue1.isEmpty();



        boolean expected = true;
        assertEquals("an error with the empty stack test..", expected,queue1.isEmpty());
    }

//    @Test public void testEmptyQueueException(){
//        Queue queue1 = new Queue();
//        throw new NullPointerException("error...called on an empty stack");

//      String expected =  new NullPointerException("error...called on an empty stack");
//        assertEquals("an error with the empty stack test..", new NullPointerException("error...called on an empty stack"), queue1.enqueue());
//    }

















}
